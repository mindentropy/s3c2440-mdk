S3C2440 TODO LIST
=================

Refactoring
-----------
1) Refactoring of code to have proper design API's --> Done.

Generic board bring up
----------------------
1) Code to bring up to main -> Done
2) Creation of linker scripts to handle the binary -> Partially done. Optimization -> Pending.


Memory Management Unit
----------------------

0) Setup MMU to handle the interrupt vector table movement. --> Done
1) Setup MMU page directory. --> Done.
2) Setup MMU to vary the mapping of interrupts and exception table --> Done.
3) Option of having l1,l2 and l3 level mappings.

GPIO
----
1) Add GPIO definitions  -> Done
2) Add GPIO helper macro definitions to manipulate bit fields.
     a) Read and write registers -> Done
	 b) Individual modifications to the bit fields -> Pending
	 c) Test script for testing of the bit pins on a DSO -> Pending

CLOCK & POWER MANAGEMENT
------------------------
1) Add clock definitions. -> Done
2) Add power definitions. -> Done.
3) Helper macros for setting up clock -> Pending
4) Test script for modification of clocks and verification on a DSO -> Pending

MEMORY CONTROLLER
-----------------
1) Add Memory controller definitions --> Done.
2) Add Memory controller helper functions --> Done.
3) Initialze the SDRAM with fixed parameters --> Done.
4) Test the SDRAM controller. --> Done.
5) Jump to code loaded in the memory. --> Done.

NAND FLASH CONTROLLER
---------------------
1) Add Flash controller definitions.
2) Read data from NAND flash and dump.
3) Copy code from NAND to RAM and jump.

DMA
---

PWM TIMER
---------

UART 
----
*Priority* 1) Bring up basic UART either with or without interrupt with basic i/o
for verification of registers. This can be run only in memory(RAM) without all the 
constraints present. RAM will be initialized by supervivi. With this we can
build different components. -->Done.

2) Design a polling driver. --> Done

USB HOST CONTROLLER
-------------------

USB DEVICE CONTROLLER
---------------------

INTERRUPT CONTROLLER
--------------------
1) Update interrupt definitions. --> Done. Testing pending.
2) Helper functions for interrupts. --> Done. Testing pending.
3) Disable all interrupt for testing. --> Done.

LCD CONTROLLER
--------------

ADC AND TOUCH SCREEN INTERFACE
------------------------------

REAL TIME CLOCK
---------------

WATCH DOG TIMER
---------------
1) Disable watchdog to prevent reset during board bringup. --> Done.

MMC/SD/SDIO CONTROLLER
----------------------

IIC-BUS INTERFACE
-----------------

IIS-BUS INTERFACE
-----------------

SPI
---

CAMERA INTERFACE
----------------

AC97 CONTROLLER
---------------

Standard Library for printing
-----------------------------
1) Create a standard library for string handling, debug printing etc. --> Done.

Speaker
-------
1) Create helper functions and test beeps -> Done.
2) Connect pwm timer to it to generate patterns.

Makefile
--------
1) Organize separate folders for the loader and the OS. --> Done.
2) Optimize the makefile to better reuse the pattern variables. --> Done
3) Create separate output files for the boot loader and the main OS. --> Done
4) Create separate libraries for the boot loader and the main OS. Reason being the loader can be 
optimized and added more functionalities. Also the main OS can have better peripheral library 
support. --> Design issue and pending.
5) Create a ld section for the startup code so that link order does not matter. 
